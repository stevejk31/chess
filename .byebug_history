c
quit
@turn
@utrn
opp_pawn.last_turn
quit
opp_pawn
opp_pawn.last_turn
opp_pawn.last_move
opp_pawn.last_turn
opp_pawn.turn
quit
opp_pawn.can_be_passanted?
c
opp_pawn.color
opp_pawn = self[[start_pos[0], end_pos[1]]].color
opp_pawn = self[[start_pos[0], end_pos[1]]]
opp_pawn.class
opp_pawn.color
pawn.color
pawn
opp_pawn.color
opp_pawn = self[[start_pos[0], end_pos[1]]].class
opp_pawn = self[[start_pos[0], end_pos[1]]]
opp_pawn = self[[start_pos[0], end_pos[1]]
opp_pawn = self[[start_pos[0], end_pos[1]].class
opp_pawn
c
pawn.generate_passant_moves.include?(end_pos)
passant.class
pawn.class
c
quit
c
quit
self[[start_pos[0], end_pos[1]]]
self[start_pos[0], end_pos[1]]
end_pos[1]
start_pos[0]
opp_pawn = self[start_pos[0], end_pos[1]]
passant.class
passant == NilPiece
      pawn.generate_passant_moves.include?(end_pos)
pawn.class == Pawn && passant == NilPiece &&
pawn.class
c
quit
c
quit
pawn.generate_passant_moves
pawn.geneerate_passant_moves
end_pos
passant.pos
pawn.pos
quit
pawn.generate_passant_moves.include?(end_pos)
end_pos
passant.pos
passant
pasasnt.pos
pawn.generate_passant_moves
quit
quit y
pawn
pawn.generate_passant_moves
quit
pawn.generate_passant_moves
quit
pawn.generate_passant_moves
pawn.generate_kill_moves
pawn.class
pawn
pawn.generate_kill_moves
quit
self[start_pos]
self[start_pos[
start_pos
pawn
quit
passant
pawn
pawn.generate_kill_moves
